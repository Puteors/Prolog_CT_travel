import tkinter as tk
from tkinter import ttk, messagebox
from pyswip import Prolog
from query_samples import query_samples
from utils import translations_keys, translations_values, quan_huyen, dia_diem, phuong_tien, thoi_gian, \
    convert_thoi_gian, convert_quan_huyen, convert_dia_diem, convert_phuong_tien, convert_thoi_gian

# Kh·ªüi t·∫°o Prolog v√† n·∫°p c∆° s·ªü tri th·ª©c t·ª´ file
prolog = Prolog()
prolog.consult("main.pl")

# H√†m c·∫≠p nh·∫≠t truy v·∫•n v·ªõi gi√° tr·ªã nh·∫≠p
def update_query():
    selected_query = query_combobox.get()
    if selected_query in queries:
        raw_query = queries[selected_query]

        # L·∫•y gi√° tr·ªã t·ª´ c√°c input v√† chuy·ªÉn n√≥ sang ƒë√∫ng format d·ª±a tr√™n ultils
        
        quan = quan_combobox.get()
        diem_khoi_hanh = diem_khoi_hanh_combobox.get()
        diem_den = diem_den_combobox.get()
        phuong_tien = phuong_tien_combobox.get()
        thoi_gian = thoi_gian_combobox.get()

        # Thay th·∫ø c√°c tham s·ªë trong truy v·∫•n
        formatted_query = raw_query.replace("Qu·∫≠n", convert_quan_huyen[quan] if quan != "" else "")\
                                   .replace("ƒêi·ªÉm kh·ªüi h√†nh", convert_dia_diem[diem_khoi_hanh] if diem_khoi_hanh != "" else "")\
                                   .replace("ƒêi·ªÉm ƒë·∫øn", convert_dia_diem[diem_den] if diem_den != "" else "")\
                                   .replace("Ph∆∞∆°ng ti·ªán", convert_phuong_tien[phuong_tien] if phuong_tien != "" else "")\
                                   .replace("Th·ªùi gian", convert_thoi_gian[thoi_gian] if thoi_gian != "" else "")


        query_entry.delete("1.0", tk.END)
        query_entry.insert("1.0", formatted_query)


# H√†m th·ª±c hi·ªán truy v·∫•n Prolog v√† hi·ªÉn th·ªã k·∫øt qu·∫£ b·∫±ng ti·∫øng Vi·ªát c√≥ d·∫•u
def Query():
    query_str = query_entry.get("1.0", tk.END).strip()
    if not query_str:
        messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn ho·∫∑c nh·∫≠p truy v·∫•n Prolog!")
        return
    try:
        results = list(prolog.query(query_str))
        result_text.delete("1.0", tk.END)
        if results:
            for res in results:
                formatted_result = "üîπ K·∫øt qu·∫£:\n"
                for key, value in res.items():
                    # D·ªãch kh√≥a (key) sang ti·∫øng Vi·ªát
                    key_vietnamese = translations_keys.get(key, key)

                    # D·ªãch gi√° tr·ªã (value) sang ti·∫øng Vi·ªát n·∫øu c√≥
                    value_vietnamese = translations_values.get(value, value)

                    # N·∫øu l√† s·ªë th√¨ gi·ªØ nguy√™n
                    if isinstance(value, (int, float)):
                        value_vietnamese = f"{value} km"

                    formatted_result += f"  - {key_vietnamese}: {value_vietnamese}\n"
                
                result_text.insert(tk.END, formatted_result + "\n")
        else:
            result_text.insert(tk.END, "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£.")
    except Exception as e:
        result_text.delete("1.0", tk.END)
        result_text.insert(tk.END, f"‚ùå L·ªói truy v·∫•n: {str(e)}")


# T·∫°o c·ª≠a s·ªï Tkinter
root = tk.Tk()
root.title("G·ª£i √Ω du l·ªãch C·∫ßn Th∆° v·ªõi Prolog")
root.geometry("900x650")

# Danh s√°ch c√¢u h·ªèi t·ª´ query_samples
queries = {}
for category in query_samples:
    for question, query in query_samples[category]:
        queries[question] = query

# Nh√£n danh m·ª•c truy v·∫•n
tk.Label(root, text="H√£y ƒë·∫∑t c√¢u h·ªèi", font=("Arial", 12)).pack(pady=5)

# Combobox ch·ªçn c√¢u h·ªèi
query_combobox = ttk.Combobox(root, values=list(queries.keys()), font=("Arial", 11), width=90)
query_combobox.pack(pady=5)
query_combobox.bind("<<ComboboxSelected>>", lambda event: update_query())

# **√î nh·∫≠p tham s·ªë ƒë·ªông**
param_frame = tk.Frame(root)
param_frame.pack(pady=5)

tk.Label(param_frame, text="Qu·∫≠n:", font=("Arial", 11)).grid(row=0, column=0, padx=5, pady=2)
quan_combobox = ttk.Combobox(param_frame, values=quan_huyen, font=("Arial", 11), width=15)
quan_combobox.grid(row=0, column=1, padx=5, pady=2)

tk.Label(param_frame, text="ƒêi·ªÉm kh·ªüi h√†nh:", font=("Arial", 11)).grid(row=0, column=2, padx=5, pady=2)
diem_khoi_hanh_combobox = ttk.Combobox(param_frame, values=dia_diem, font=("Arial", 11), width=15)
diem_khoi_hanh_combobox.grid(row=0, column=3, padx=5, pady=2)

tk.Label(param_frame, text="ƒêi·ªÉm ƒë·∫øn:", font=("Arial", 11)).grid(row=1, column=0, padx=5, pady=2)
diem_den_combobox = ttk.Combobox(param_frame, values=dia_diem, font=("Arial", 11), width=15)
diem_den_combobox.grid(row=1, column=1, padx=5, pady=2)

tk.Label(param_frame, text="Ph∆∞∆°ng ti·ªán:", font=("Arial", 11)).grid(row=1, column=2, padx=5, pady=2)
phuong_tien_combobox = ttk.Combobox(param_frame, values=phuong_tien, font=("Arial", 11), width=15)
phuong_tien_combobox.grid(row=1, column=3, padx=5, pady=2)

tk.Label(param_frame, text="Th·ªùi gian:", font=("Arial", 11)).grid(row=2, column=0, padx=5, pady=2)
thoi_gian_combobox = ttk.Combobox(param_frame, values=thoi_gian, font=("Arial", 11), width=15)
thoi_gian_combobox.grid(row=2, column=1, padx=5, pady=2)

# N√∫t c·∫≠p nh·∫≠t truy v·∫•n
tk.Button(root, text="C·∫≠p nh·∫≠t truy v·∫•n", command=update_query, font=("Arial", 11)).pack(pady=5)

# √î nh·∫≠p truy v·∫•n (v·ªõi ƒë·ªãnh d·∫°ng ƒë·∫≠m)
query_entry = tk.Text(root, height=4, width=90, font=("Arial", 11))
query_entry.pack(pady=5)

# N√∫t th·ª±c hi·ªán truy v·∫•n
tk.Button(root, text="Th·ª±c hi·ªán truy v·∫•n", command=Query, font=("Arial", 11)).pack(pady=5)

# K·∫øt qu·∫£ hi·ªÉn th·ªã
result_text = tk.Text(root, height=12, width=100, font=("Arial", 11))
result_text.pack(pady=5)

root.mainloop()
